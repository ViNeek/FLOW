// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PRIME.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PRIME.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PRIME {

namespace {

const ::google::protobuf::Descriptor* PRIMEMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PRIMEMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PRIMEMessage_MsgType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PeerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_CSSIReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_CSSIReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_PeerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_PeerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_PRIMEState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_PRIMEState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_P2PSIReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_P2PSIReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Reply_ReplyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_CSSIRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_CSSIRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_P2PSIRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_P2PSIRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Report_reflection_ = NULL;
const ::google::protobuf::Descriptor* Report_DiffusionReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Report_DiffusionReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* Report_SwarmingReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Report_SwarmingReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* Report_AddDiffParentReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Report_AddDiffParentReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* Report_AddSwarmParentReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Report_AddSwarmParentReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* Report_AddSwarmChildReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Report_AddSwarmChildReport_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Report_ReportType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PRIME_2eproto() {
  protobuf_AddDesc_PRIME_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PRIME.proto");
  GOOGLE_CHECK(file != NULL);
  PRIMEMessage_descriptor_ = file->message_type(0);
  static const int PRIMEMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIMEMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIMEMessage, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIMEMessage, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIMEMessage, report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIMEMessage, dummy_),
  };
  PRIMEMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PRIMEMessage_descriptor_,
      PRIMEMessage::default_instance_,
      PRIMEMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIMEMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIMEMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PRIMEMessage));
  PRIMEMessage_MsgType_descriptor_ = PRIMEMessage_descriptor_->enum_type(0);
  PeerInfo_descriptor_ = file->message_type(1);
  static const int PeerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerInfo, ipaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerInfo, repport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerInfo, rtpport_),
  };
  PeerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeerInfo_descriptor_,
      PeerInfo::default_instance_,
      PeerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeerInfo));
  Reply_descriptor_ = file->message_type(2);
  static const int Reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, cs_session_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, p2p_session_state_),
  };
  Reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply));
  Reply_CSSIReply_descriptor_ = Reply_descriptor_->nested_type(0);
  static const int Reply_CSSIReply_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_CSSIReply, streamport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_CSSIReply, sdp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_CSSIReply, maxframecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_CSSIReply, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_CSSIReply, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_CSSIReply, pixfmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_CSSIReply, diffparent_),
  };
  Reply_CSSIReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_CSSIReply_descriptor_,
      Reply_CSSIReply::default_instance_,
      Reply_CSSIReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_CSSIReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_CSSIReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_CSSIReply));
  Reply_PeerState_descriptor_ = Reply_descriptor_->nested_type(1);
  static const int Reply_PeerState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_PeerState, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_PeerState, diffparents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_PeerState, diffchildren_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_PeerState, swarmparents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_PeerState, swarmchildren_),
  };
  Reply_PeerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_PeerState_descriptor_,
      Reply_PeerState::default_instance_,
      Reply_PeerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_PeerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_PeerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_PeerState));
  Reply_PRIMEState_descriptor_ = Reply_descriptor_->nested_type(2);
  static const int Reply_PRIMEState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_PRIMEState, nodes_),
  };
  Reply_PRIMEState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_PRIMEState_descriptor_,
      Reply_PRIMEState::default_instance_,
      Reply_PRIMEState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_PRIMEState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_PRIMEState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_PRIMEState));
  Reply_P2PSIReply_descriptor_ = Reply_descriptor_->nested_type(3);
  static const int Reply_P2PSIReply_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_P2PSIReply, streamport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_P2PSIReply, sdp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_P2PSIReply, maxframecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_P2PSIReply, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_P2PSIReply, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_P2PSIReply, pixfmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_P2PSIReply, diffparent_),
  };
  Reply_P2PSIReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_P2PSIReply_descriptor_,
      Reply_P2PSIReply::default_instance_,
      Reply_P2PSIReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_P2PSIReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_P2PSIReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply_P2PSIReply));
  Reply_ReplyType_descriptor_ = Reply_descriptor_->enum_type(0);
  Request_descriptor_ = file->message_type(3);
  static const int Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cs_session_props_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, p2p_session_props_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_CSSIRequest_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_CSSIRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CSSIRequest, dbw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CSSIRequest, peername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CSSIRequest, repport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CSSIRequest, ipaddr_),
  };
  Request_CSSIRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_CSSIRequest_descriptor_,
      Request_CSSIRequest::default_instance_,
      Request_CSSIRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CSSIRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CSSIRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_CSSIRequest));
  Request_P2PSIRequest_descriptor_ = Request_descriptor_->nested_type(1);
  static const int Request_P2PSIRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_P2PSIRequest, dbw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_P2PSIRequest, ubw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_P2PSIRequest, repport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_P2PSIRequest, rtprecvport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_P2PSIRequest, repsendport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_P2PSIRequest, peername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_P2PSIRequest, ipaddr_),
  };
  Request_P2PSIRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_P2PSIRequest_descriptor_,
      Request_P2PSIRequest::default_instance_,
      Request_P2PSIRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_P2PSIRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_P2PSIRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_P2PSIRequest));
  Request_RequestType_descriptor_ = Request_descriptor_->enum_type(0);
  Report_descriptor_ = file->message_type(4);
  static const int Report_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, diff_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, swarm_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, add_diff_parent_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, add_swarm_parent_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, add_swarm_child_report_),
  };
  Report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Report_descriptor_,
      Report::default_instance_,
      Report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Report));
  Report_DiffusionReport_descriptor_ = Report_descriptor_->nested_type(0);
  static const int Report_DiffusionReport_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_DiffusionReport, start_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_DiffusionReport, end_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_DiffusionReport, start_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_DiffusionReport, end_seq_),
  };
  Report_DiffusionReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Report_DiffusionReport_descriptor_,
      Report_DiffusionReport::default_instance_,
      Report_DiffusionReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_DiffusionReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_DiffusionReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Report_DiffusionReport));
  Report_SwarmingReport_descriptor_ = Report_descriptor_->nested_type(1);
  static const int Report_SwarmingReport_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_SwarmingReport, start_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_SwarmingReport, end_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_SwarmingReport, state_),
  };
  Report_SwarmingReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Report_SwarmingReport_descriptor_,
      Report_SwarmingReport::default_instance_,
      Report_SwarmingReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_SwarmingReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_SwarmingReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Report_SwarmingReport));
  Report_AddDiffParentReport_descriptor_ = Report_descriptor_->nested_type(2);
  static const int Report_AddDiffParentReport_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_AddDiffParentReport, peername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_AddDiffParentReport, stream_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_AddDiffParentReport, rep_port_),
  };
  Report_AddDiffParentReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Report_AddDiffParentReport_descriptor_,
      Report_AddDiffParentReport::default_instance_,
      Report_AddDiffParentReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_AddDiffParentReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_AddDiffParentReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Report_AddDiffParentReport));
  Report_AddSwarmParentReport_descriptor_ = Report_descriptor_->nested_type(3);
  static const int Report_AddSwarmParentReport_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_AddSwarmParentReport, swarmparent_),
  };
  Report_AddSwarmParentReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Report_AddSwarmParentReport_descriptor_,
      Report_AddSwarmParentReport::default_instance_,
      Report_AddSwarmParentReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_AddSwarmParentReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_AddSwarmParentReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Report_AddSwarmParentReport));
  Report_AddSwarmChildReport_descriptor_ = Report_descriptor_->nested_type(4);
  static const int Report_AddSwarmChildReport_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_AddSwarmChildReport, swarmchild_),
  };
  Report_AddSwarmChildReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Report_AddSwarmChildReport_descriptor_,
      Report_AddSwarmChildReport::default_instance_,
      Report_AddSwarmChildReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_AddSwarmChildReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_AddSwarmChildReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Report_AddSwarmChildReport));
  Report_ReportType_descriptor_ = Report_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PRIME_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PRIMEMessage_descriptor_, &PRIMEMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeerInfo_descriptor_, &PeerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_descriptor_, &Reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_CSSIReply_descriptor_, &Reply_CSSIReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_PeerState_descriptor_, &Reply_PeerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_PRIMEState_descriptor_, &Reply_PRIMEState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_P2PSIReply_descriptor_, &Reply_P2PSIReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_CSSIRequest_descriptor_, &Request_CSSIRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_P2PSIRequest_descriptor_, &Request_P2PSIRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Report_descriptor_, &Report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Report_DiffusionReport_descriptor_, &Report_DiffusionReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Report_SwarmingReport_descriptor_, &Report_SwarmingReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Report_AddDiffParentReport_descriptor_, &Report_AddDiffParentReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Report_AddSwarmParentReport_descriptor_, &Report_AddSwarmParentReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Report_AddSwarmChildReport_descriptor_, &Report_AddSwarmChildReport::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PRIME_2eproto() {
  delete PRIMEMessage::default_instance_;
  delete PRIMEMessage_reflection_;
  delete PeerInfo::default_instance_;
  delete PeerInfo_reflection_;
  delete Reply::default_instance_;
  delete Reply_reflection_;
  delete Reply_CSSIReply::default_instance_;
  delete Reply_CSSIReply_reflection_;
  delete Reply_PeerState::default_instance_;
  delete Reply_PeerState_reflection_;
  delete Reply_PRIMEState::default_instance_;
  delete Reply_PRIMEState_reflection_;
  delete Reply_P2PSIReply::default_instance_;
  delete Reply_P2PSIReply_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Request_CSSIRequest::default_instance_;
  delete Request_CSSIRequest_reflection_;
  delete Request_P2PSIRequest::default_instance_;
  delete Request_P2PSIRequest_reflection_;
  delete Report::default_instance_;
  delete Report_reflection_;
  delete Report_DiffusionReport::default_instance_;
  delete Report_DiffusionReport_reflection_;
  delete Report_SwarmingReport::default_instance_;
  delete Report_SwarmingReport_reflection_;
  delete Report_AddDiffParentReport::default_instance_;
  delete Report_AddDiffParentReport_reflection_;
  delete Report_AddSwarmParentReport::default_instance_;
  delete Report_AddSwarmParentReport_reflection_;
  delete Report_AddSwarmChildReport::default_instance_;
  delete Report_AddSwarmChildReport_reflection_;
}

void protobuf_AddDesc_PRIME_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013PRIME.proto\022\005PRIME\"\374\001\n\014PRIMEMessage\022)\n"
    "\004type\030\001 \002(\0162\033.PRIME.PRIMEMessage.MsgType"
    "\022\033\n\005reply\030\002 \001(\0132\014.PRIME.Reply\022\037\n\007request"
    "\030\003 \001(\0132\016.PRIME.Request\022\035\n\006report\030\004 \001(\0132\r"
    ".PRIME.Report\022\r\n\005dummy\030\005 \001(\t\"U\n\007MsgType\022"
    "\017\n\013PRIME_REPLY\020\001\022\021\n\rPRIME_REQUEST\020\002\022\020\n\014P"
    "RIME_REPORT\020\003\022\024\n\020PRIME_HOLE_PUNCH\020\004\"<\n\010P"
    "eerInfo\022\016\n\006ipAddr\030\001 \002(\t\022\017\n\007repPort\030\002 \002(\005"
    "\022\017\n\007rtpPort\030\003 \002(\005\"\306\006\n\005Reply\022$\n\004Type\030\001 \002("
    "\0162\026.PRIME.Reply.ReplyType\0220\n\020cs_session_"
    "state\030\025 \001(\0132\026.PRIME.Reply.CSSIReply\0222\n\021p"
    "2p_session_state\030\026 \001(\0132\027.PRIME.Reply.P2P"
    "SIReply\032\227\001\n\tCSSIReply\022\022\n\nstreamPort\030\001 \002("
    "\005\022\013\n\003sdp\030\002 \002(\t\022\025\n\rmaxFrameCount\030\003 \002(\005\022\r\n"
    "\005width\030\004 \002(\005\022\016\n\006height\030\005 \002(\005\022\016\n\006pixFmt\030\006"
    " \002(\005\022#\n\ndiffParent\030\007 \002(\0132\017.PRIME.PeerInf"
    "o\032\306\001\n\tPeerState\022\035\n\004dest\030\001 \002(\0132\017.PRIME.Pe"
    "erInfo\022$\n\013diffParents\030\002 \003(\0132\017.PRIME.Peer"
    "Info\022%\n\014diffChildren\030\003 \003(\0132\017.PRIME.PeerI"
    "nfo\022%\n\014swarmParents\030\004 \003(\0132\017.PRIME.PeerIn"
    "fo\022&\n\rswarmChildren\030\005 \003(\0132\017.PRIME.PeerIn"
    "fo\0323\n\nPRIMEState\022%\n\005nodes\030\001 \003(\0132\026.PRIME."
    "Reply.PeerState\032\230\001\n\nP2PSIReply\022\022\n\nstream"
    "Port\030\001 \002(\005\022\013\n\003sdp\030\002 \002(\t\022\025\n\rmaxFrameCount"
    "\030\003 \002(\005\022\r\n\005width\030\004 \002(\005\022\016\n\006height\030\005 \002(\005\022\016\n"
    "\006pixFmt\030\006 \002(\005\022#\n\ndiffParent\030\007 \002(\0132\017.PRIM"
    "E.PeerInfo\"~\n\tReplyType\022\r\n\tNULL_TYPE\020\001\022\023"
    "\n\017CS_SESSION_INIT\020\002\022\024\n\020P2P_SESSION_INIT\020"
    "\003\022\022\n\016CS_SESSION_END\020\004\022\023\n\017P2P_SESSION_END"
    "\020\005\022\016\n\nSPEED_TEST\020\006\"\337\004\n\007Request\022(\n\004Type\030\001"
    " \002(\0162\032.PRIME.Request.RequestType\0224\n\020cs_s"
    "ession_props\030\025 \001(\0132\032.PRIME.Request.CSSIR"
    "equest\0226\n\021p2p_session_props\030\026 \001(\0132\033.PRIM"
    "E.Request.P2PSIRequest\032M\n\013CSSIRequest\022\013\n"
    "\003DBW\030\001 \002(\001\022\020\n\010peerName\030\002 \002(\t\022\017\n\007repPort\030"
    "\003 \002(\005\022\016\n\006ipAddr\030\004 \002(\t\032\205\001\n\014P2PSIRequest\022\013"
    "\n\003DBW\030\001 \002(\001\022\013\n\003UBW\030\002 \002(\001\022\017\n\007repPort\030\003 \002("
    "\005\022\023\n\013rtpRecvPort\030\004 \002(\005\022\023\n\013repSendPort\030\005 "
    "\002(\005\022\020\n\010peerName\030\006 \002(\t\022\016\n\006ipAddr\030\007 \002(\t\"\344\001"
    "\n\013RequestType\022\r\n\tNULL_TYPE\020\001\022\023\n\017CS_SESSI"
    "ON_INIT\020\002\022\024\n\020P2P_SESSION_INIT\020\003\022\022\n\016CS_SE"
    "SSION_END\020\004\022\023\n\017P2P_SESSION_END\020\005\022\034\n\030SERV"
    "E_AS_SWARMING_PARENT\020\006\022\031\n\025BECOME_SWARMIN"
    "G_CHILD\020\007\022\035\n\031SERVE_AS_DIFFUSION_PARENT\020\010"
    "\022\032\n\026BECOME_DIFFUSION_CHILD\020\t\"\376\006\n\006Report\022"
    "&\n\004Type\030\001 \002(\0162\030.PRIME.Report.ReportType\022"
    "2\n\013diff_report\030\025 \001(\0132\035.PRIME.Report.Diff"
    "usionReport\0222\n\014swarm_report\030\026 \001(\0132\034.PRIM"
    "E.Report.SwarmingReport\022A\n\026add_diff_pare"
    "nt_report\030\027 \001(\0132!.PRIME.Report.AddDiffPa"
    "rentReport\022C\n\027add_swarm_parent_report\030\030 "
    "\001(\0132\".PRIME.Report.AddSwarmParentReport\022"
    "A\n\026add_swarm_child_report\030\031 \001(\0132!.PRIME."
    "Report.AddSwarmChildReport\032W\n\017DiffusionR"
    "eport\022\020\n\010start_ts\030\001 \002(\004\022\016\n\006end_ts\030\002 \002(\004\022"
    "\021\n\tstart_seq\030\003 \002(\r\022\017\n\007end_seq\030\004 \002(\r\032C\n\016S"
    "warmingReport\022\021\n\tstart_seq\030\001 \002(\r\022\017\n\007end_"
    "seq\030\002 \002(\r\022\r\n\005state\030\003 \003(\010\032N\n\023AddDiffParen"
    "tReport\022\020\n\010peerName\030\001 \002(\t\022\023\n\013stream_port"
    "\030\002 \002(\005\022\020\n\010rep_port\030\003 \002(\005\032<\n\024AddSwarmPare"
    "ntReport\022$\n\013swarmParent\030\001 \002(\0132\017.PRIME.Pe"
    "erInfo\032:\n\023AddSwarmChildReport\022#\n\nswarmCh"
    "ild\030\001 \002(\0132\017.PRIME.PeerInfo\"\260\001\n\nReportTyp"
    "e\022\r\n\tNULL_TYPE\020\001\022\025\n\021SWARM_REPORT_TYPE\020\002\022"
    "\024\n\020DIFF_REPORT_TYPE\020\003\022\030\n\024ADD_DIFF_PARENT"
    "_TYPE\020\004\022\027\n\023ADD_DIFF_CHILD_TYPE\020\005\022\031\n\025ADD_"
    "SWARM_PARENT_TYPE\020\006\022\030\n\024ADD_SWARM_CHILD_T"
    "YPE\020\007", 2685);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PRIME.proto", &protobuf_RegisterTypes);
  PRIMEMessage::default_instance_ = new PRIMEMessage();
  PeerInfo::default_instance_ = new PeerInfo();
  Reply::default_instance_ = new Reply();
  Reply_CSSIReply::default_instance_ = new Reply_CSSIReply();
  Reply_PeerState::default_instance_ = new Reply_PeerState();
  Reply_PRIMEState::default_instance_ = new Reply_PRIMEState();
  Reply_P2PSIReply::default_instance_ = new Reply_P2PSIReply();
  Request::default_instance_ = new Request();
  Request_CSSIRequest::default_instance_ = new Request_CSSIRequest();
  Request_P2PSIRequest::default_instance_ = new Request_P2PSIRequest();
  Report::default_instance_ = new Report();
  Report_DiffusionReport::default_instance_ = new Report_DiffusionReport();
  Report_SwarmingReport::default_instance_ = new Report_SwarmingReport();
  Report_AddDiffParentReport::default_instance_ = new Report_AddDiffParentReport();
  Report_AddSwarmParentReport::default_instance_ = new Report_AddSwarmParentReport();
  Report_AddSwarmChildReport::default_instance_ = new Report_AddSwarmChildReport();
  PRIMEMessage::default_instance_->InitAsDefaultInstance();
  PeerInfo::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  Reply_CSSIReply::default_instance_->InitAsDefaultInstance();
  Reply_PeerState::default_instance_->InitAsDefaultInstance();
  Reply_PRIMEState::default_instance_->InitAsDefaultInstance();
  Reply_P2PSIReply::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Request_CSSIRequest::default_instance_->InitAsDefaultInstance();
  Request_P2PSIRequest::default_instance_->InitAsDefaultInstance();
  Report::default_instance_->InitAsDefaultInstance();
  Report_DiffusionReport::default_instance_->InitAsDefaultInstance();
  Report_SwarmingReport::default_instance_->InitAsDefaultInstance();
  Report_AddDiffParentReport::default_instance_->InitAsDefaultInstance();
  Report_AddSwarmParentReport::default_instance_->InitAsDefaultInstance();
  Report_AddSwarmChildReport::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PRIME_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PRIME_2eproto {
  StaticDescriptorInitializer_PRIME_2eproto() {
    protobuf_AddDesc_PRIME_2eproto();
  }
} static_descriptor_initializer_PRIME_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* PRIMEMessage_MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRIMEMessage_MsgType_descriptor_;
}
bool PRIMEMessage_MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PRIMEMessage_MsgType PRIMEMessage::PRIME_REPLY;
const PRIMEMessage_MsgType PRIMEMessage::PRIME_REQUEST;
const PRIMEMessage_MsgType PRIMEMessage::PRIME_REPORT;
const PRIMEMessage_MsgType PRIMEMessage::PRIME_HOLE_PUNCH;
const PRIMEMessage_MsgType PRIMEMessage::MsgType_MIN;
const PRIMEMessage_MsgType PRIMEMessage::MsgType_MAX;
const int PRIMEMessage::MsgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PRIMEMessage::kTypeFieldNumber;
const int PRIMEMessage::kReplyFieldNumber;
const int PRIMEMessage::kRequestFieldNumber;
const int PRIMEMessage::kReportFieldNumber;
const int PRIMEMessage::kDummyFieldNumber;
#endif  // !_MSC_VER

PRIMEMessage::PRIMEMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PRIMEMessage::InitAsDefaultInstance() {
  reply_ = const_cast< ::PRIME::Reply*>(&::PRIME::Reply::default_instance());
  request_ = const_cast< ::PRIME::Request*>(&::PRIME::Request::default_instance());
  report_ = const_cast< ::PRIME::Report*>(&::PRIME::Report::default_instance());
}

PRIMEMessage::PRIMEMessage(const PRIMEMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PRIMEMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  reply_ = NULL;
  request_ = NULL;
  report_ = NULL;
  dummy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PRIMEMessage::~PRIMEMessage() {
  SharedDtor();
}

void PRIMEMessage::SharedDtor() {
  if (dummy_ != &::google::protobuf::internal::kEmptyString) {
    delete dummy_;
  }
  if (this != default_instance_) {
    delete reply_;
    delete request_;
    delete report_;
  }
}

void PRIMEMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PRIMEMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRIMEMessage_descriptor_;
}

const PRIMEMessage& PRIMEMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

PRIMEMessage* PRIMEMessage::default_instance_ = NULL;

PRIMEMessage* PRIMEMessage::New() const {
  return new PRIMEMessage;
}

void PRIMEMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_reply()) {
      if (reply_ != NULL) reply_->::PRIME::Reply::Clear();
    }
    if (has_request()) {
      if (request_ != NULL) request_->::PRIME::Request::Clear();
    }
    if (has_report()) {
      if (report_ != NULL) report_->::PRIME::Report::Clear();
    }
    if (has_dummy()) {
      if (dummy_ != &::google::protobuf::internal::kEmptyString) {
        dummy_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PRIMEMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PRIME.PRIMEMessage.MsgType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PRIME::PRIMEMessage_MsgType_IsValid(value)) {
            set_type(static_cast< ::PRIME::PRIMEMessage_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reply;
        break;
      }

      // optional .PRIME.Reply reply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_request;
        break;
      }

      // optional .PRIME.Request request = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_report;
        break;
      }

      // optional .PRIME.Report report = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dummy;
        break;
      }

      // optional string dummy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dummy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dummy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dummy().data(), this->dummy().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PRIMEMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PRIME.PRIMEMessage.MsgType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .PRIME.Reply reply = 2;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reply(), output);
  }

  // optional .PRIME.Request request = 3;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->request(), output);
  }

  // optional .PRIME.Report report = 4;
  if (has_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->report(), output);
  }

  // optional string dummy = 5;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dummy().data(), this->dummy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PRIMEMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PRIME.PRIMEMessage.MsgType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .PRIME.Reply reply = 2;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reply(), target);
  }

  // optional .PRIME.Request request = 3;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->request(), target);
  }

  // optional .PRIME.Report report = 4;
  if (has_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->report(), target);
  }

  // optional string dummy = 5;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dummy().data(), this->dummy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PRIMEMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PRIME.PRIMEMessage.MsgType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .PRIME.Reply reply = 2;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reply());
    }

    // optional .PRIME.Request request = 3;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }

    // optional .PRIME.Report report = 4;
    if (has_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->report());
    }

    // optional string dummy = 5;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRIMEMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PRIMEMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PRIMEMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PRIMEMessage::MergeFrom(const PRIMEMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reply()) {
      mutable_reply()->::PRIME::Reply::MergeFrom(from.reply());
    }
    if (from.has_request()) {
      mutable_request()->::PRIME::Request::MergeFrom(from.request());
    }
    if (from.has_report()) {
      mutable_report()->::PRIME::Report::MergeFrom(from.report());
    }
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PRIMEMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRIMEMessage::CopyFrom(const PRIMEMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRIMEMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_reply()) {
    if (!this->reply().IsInitialized()) return false;
  }
  if (has_request()) {
    if (!this->request().IsInitialized()) return false;
  }
  if (has_report()) {
    if (!this->report().IsInitialized()) return false;
  }
  return true;
}

void PRIMEMessage::Swap(PRIMEMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(reply_, other->reply_);
    std::swap(request_, other->request_);
    std::swap(report_, other->report_);
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PRIMEMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PRIMEMessage_descriptor_;
  metadata.reflection = PRIMEMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerInfo::kIpAddrFieldNumber;
const int PeerInfo::kRepPortFieldNumber;
const int PeerInfo::kRtpPortFieldNumber;
#endif  // !_MSC_VER

PeerInfo::PeerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeerInfo::InitAsDefaultInstance() {
}

PeerInfo::PeerInfo(const PeerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeerInfo::SharedCtor() {
  _cached_size_ = 0;
  ipaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  repport_ = 0;
  rtpport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeerInfo::~PeerInfo() {
  SharedDtor();
}

void PeerInfo::SharedDtor() {
  if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddr_;
  }
  if (this != default_instance_) {
  }
}

void PeerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerInfo_descriptor_;
}

const PeerInfo& PeerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

PeerInfo* PeerInfo::default_instance_ = NULL;

PeerInfo* PeerInfo::New() const {
  return new PeerInfo;
}

void PeerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ipaddr()) {
      if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
        ipaddr_->clear();
      }
    }
    repport_ = 0;
    rtpport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ipAddr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipaddr().data(), this->ipaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_repPort;
        break;
      }

      // required int32 repPort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repport_)));
          set_has_repport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rtpPort;
        break;
      }

      // required int32 rtpPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtpPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtpport_)));
          set_has_rtpport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ipAddr = 1;
  if (has_ipaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ipaddr(), output);
  }

  // required int32 repPort = 2;
  if (has_repport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->repport(), output);
  }

  // required int32 rtpPort = 3;
  if (has_rtpport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rtpport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ipAddr = 1;
  if (has_ipaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipaddr(), target);
  }

  // required int32 repPort = 2;
  if (has_repport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->repport(), target);
  }

  // required int32 rtpPort = 3;
  if (has_rtpport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rtpport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ipAddr = 1;
    if (has_ipaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddr());
    }

    // required int32 repPort = 2;
    if (has_repport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repport());
    }

    // required int32 rtpPort = 3;
    if (has_rtpport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtpport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerInfo::MergeFrom(const PeerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipaddr()) {
      set_ipaddr(from.ipaddr());
    }
    if (from.has_repport()) {
      set_repport(from.repport());
    }
    if (from.has_rtpport()) {
      set_rtpport(from.rtpport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerInfo::CopyFrom(const PeerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PeerInfo::Swap(PeerInfo* other) {
  if (other != this) {
    std::swap(ipaddr_, other->ipaddr_);
    std::swap(repport_, other->repport_);
    std::swap(rtpport_, other->rtpport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerInfo_descriptor_;
  metadata.reflection = PeerInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Reply_ReplyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_ReplyType_descriptor_;
}
bool Reply_ReplyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Reply_ReplyType Reply::NULL_TYPE;
const Reply_ReplyType Reply::CS_SESSION_INIT;
const Reply_ReplyType Reply::P2P_SESSION_INIT;
const Reply_ReplyType Reply::CS_SESSION_END;
const Reply_ReplyType Reply::P2P_SESSION_END;
const Reply_ReplyType Reply::SPEED_TEST;
const Reply_ReplyType Reply::ReplyType_MIN;
const Reply_ReplyType Reply::ReplyType_MAX;
const int Reply::ReplyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Reply_CSSIReply::kStreamPortFieldNumber;
const int Reply_CSSIReply::kSdpFieldNumber;
const int Reply_CSSIReply::kMaxFrameCountFieldNumber;
const int Reply_CSSIReply::kWidthFieldNumber;
const int Reply_CSSIReply::kHeightFieldNumber;
const int Reply_CSSIReply::kPixFmtFieldNumber;
const int Reply_CSSIReply::kDiffParentFieldNumber;
#endif  // !_MSC_VER

Reply_CSSIReply::Reply_CSSIReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Reply_CSSIReply::InitAsDefaultInstance() {
  diffparent_ = const_cast< ::PRIME::PeerInfo*>(&::PRIME::PeerInfo::default_instance());
}

Reply_CSSIReply::Reply_CSSIReply(const Reply_CSSIReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Reply_CSSIReply::SharedCtor() {
  _cached_size_ = 0;
  streamport_ = 0;
  sdp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxframecount_ = 0;
  width_ = 0;
  height_ = 0;
  pixfmt_ = 0;
  diffparent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_CSSIReply::~Reply_CSSIReply() {
  SharedDtor();
}

void Reply_CSSIReply::SharedDtor() {
  if (sdp_ != &::google::protobuf::internal::kEmptyString) {
    delete sdp_;
  }
  if (this != default_instance_) {
    delete diffparent_;
  }
}

void Reply_CSSIReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_CSSIReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_CSSIReply_descriptor_;
}

const Reply_CSSIReply& Reply_CSSIReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

Reply_CSSIReply* Reply_CSSIReply::default_instance_ = NULL;

Reply_CSSIReply* Reply_CSSIReply::New() const {
  return new Reply_CSSIReply;
}

void Reply_CSSIReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    streamport_ = 0;
    if (has_sdp()) {
      if (sdp_ != &::google::protobuf::internal::kEmptyString) {
        sdp_->clear();
      }
    }
    maxframecount_ = 0;
    width_ = 0;
    height_ = 0;
    pixfmt_ = 0;
    if (has_diffparent()) {
      if (diffparent_ != NULL) diffparent_->::PRIME::PeerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_CSSIReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 streamPort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streamport_)));
          set_has_streamport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sdp;
        break;
      }

      // required string sdp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdp().data(), this->sdp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxFrameCount;
        break;
      }

      // required int32 maxFrameCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxFrameCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxframecount_)));
          set_has_maxframecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // required int32 width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // required int32 height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pixFmt;
        break;
      }

      // required int32 pixFmt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixFmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixfmt_)));
          set_has_pixfmt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_diffParent;
        break;
      }

      // required .PRIME.PeerInfo diffParent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diffParent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diffparent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Reply_CSSIReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 streamPort = 1;
  if (has_streamport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->streamport(), output);
  }

  // required string sdp = 2;
  if (has_sdp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdp().data(), this->sdp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sdp(), output);
  }

  // required int32 maxFrameCount = 3;
  if (has_maxframecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxframecount(), output);
  }

  // required int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // required int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // required int32 pixFmt = 6;
  if (has_pixfmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pixfmt(), output);
  }

  // required .PRIME.PeerInfo diffParent = 7;
  if (has_diffparent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->diffparent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Reply_CSSIReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 streamPort = 1;
  if (has_streamport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->streamport(), target);
  }

  // required string sdp = 2;
  if (has_sdp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdp().data(), this->sdp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sdp(), target);
  }

  // required int32 maxFrameCount = 3;
  if (has_maxframecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxframecount(), target);
  }

  // required int32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // required int32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // required int32 pixFmt = 6;
  if (has_pixfmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pixfmt(), target);
  }

  // required .PRIME.PeerInfo diffParent = 7;
  if (has_diffparent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->diffparent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Reply_CSSIReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 streamPort = 1;
    if (has_streamport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streamport());
    }

    // required string sdp = 2;
    if (has_sdp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdp());
    }

    // required int32 maxFrameCount = 3;
    if (has_maxframecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxframecount());
    }

    // required int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required int32 pixFmt = 6;
    if (has_pixfmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixfmt());
    }

    // required .PRIME.PeerInfo diffParent = 7;
    if (has_diffparent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diffparent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_CSSIReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_CSSIReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_CSSIReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_CSSIReply::MergeFrom(const Reply_CSSIReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streamport()) {
      set_streamport(from.streamport());
    }
    if (from.has_sdp()) {
      set_sdp(from.sdp());
    }
    if (from.has_maxframecount()) {
      set_maxframecount(from.maxframecount());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_pixfmt()) {
      set_pixfmt(from.pixfmt());
    }
    if (from.has_diffparent()) {
      mutable_diffparent()->::PRIME::PeerInfo::MergeFrom(from.diffparent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_CSSIReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_CSSIReply::CopyFrom(const Reply_CSSIReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_CSSIReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_diffparent()) {
    if (!this->diffparent().IsInitialized()) return false;
  }
  return true;
}

void Reply_CSSIReply::Swap(Reply_CSSIReply* other) {
  if (other != this) {
    std::swap(streamport_, other->streamport_);
    std::swap(sdp_, other->sdp_);
    std::swap(maxframecount_, other->maxframecount_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(pixfmt_, other->pixfmt_);
    std::swap(diffparent_, other->diffparent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_CSSIReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_CSSIReply_descriptor_;
  metadata.reflection = Reply_CSSIReply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply_PeerState::kDestFieldNumber;
const int Reply_PeerState::kDiffParentsFieldNumber;
const int Reply_PeerState::kDiffChildrenFieldNumber;
const int Reply_PeerState::kSwarmParentsFieldNumber;
const int Reply_PeerState::kSwarmChildrenFieldNumber;
#endif  // !_MSC_VER

Reply_PeerState::Reply_PeerState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Reply_PeerState::InitAsDefaultInstance() {
  dest_ = const_cast< ::PRIME::PeerInfo*>(&::PRIME::PeerInfo::default_instance());
}

Reply_PeerState::Reply_PeerState(const Reply_PeerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Reply_PeerState::SharedCtor() {
  _cached_size_ = 0;
  dest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_PeerState::~Reply_PeerState() {
  SharedDtor();
}

void Reply_PeerState::SharedDtor() {
  if (this != default_instance_) {
    delete dest_;
  }
}

void Reply_PeerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_PeerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_PeerState_descriptor_;
}

const Reply_PeerState& Reply_PeerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

Reply_PeerState* Reply_PeerState::default_instance_ = NULL;

Reply_PeerState* Reply_PeerState::New() const {
  return new Reply_PeerState;
}

void Reply_PeerState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dest()) {
      if (dest_ != NULL) dest_->::PRIME::PeerInfo::Clear();
    }
  }
  diffparents_.Clear();
  diffchildren_.Clear();
  swarmparents_.Clear();
  swarmchildren_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_PeerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PRIME.PeerInfo dest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_diffParents;
        break;
      }

      // repeated .PRIME.PeerInfo diffParents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diffParents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_diffparents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_diffParents;
        if (input->ExpectTag(26)) goto parse_diffChildren;
        break;
      }

      // repeated .PRIME.PeerInfo diffChildren = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diffChildren:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_diffchildren()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_diffChildren;
        if (input->ExpectTag(34)) goto parse_swarmParents;
        break;
      }

      // repeated .PRIME.PeerInfo swarmParents = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_swarmParents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_swarmparents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_swarmParents;
        if (input->ExpectTag(42)) goto parse_swarmChildren;
        break;
      }

      // repeated .PRIME.PeerInfo swarmChildren = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_swarmChildren:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_swarmchildren()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_swarmChildren;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Reply_PeerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PRIME.PeerInfo dest = 1;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dest(), output);
  }

  // repeated .PRIME.PeerInfo diffParents = 2;
  for (int i = 0; i < this->diffparents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->diffparents(i), output);
  }

  // repeated .PRIME.PeerInfo diffChildren = 3;
  for (int i = 0; i < this->diffchildren_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->diffchildren(i), output);
  }

  // repeated .PRIME.PeerInfo swarmParents = 4;
  for (int i = 0; i < this->swarmparents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->swarmparents(i), output);
  }

  // repeated .PRIME.PeerInfo swarmChildren = 5;
  for (int i = 0; i < this->swarmchildren_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->swarmchildren(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Reply_PeerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PRIME.PeerInfo dest = 1;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dest(), target);
  }

  // repeated .PRIME.PeerInfo diffParents = 2;
  for (int i = 0; i < this->diffparents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->diffparents(i), target);
  }

  // repeated .PRIME.PeerInfo diffChildren = 3;
  for (int i = 0; i < this->diffchildren_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->diffchildren(i), target);
  }

  // repeated .PRIME.PeerInfo swarmParents = 4;
  for (int i = 0; i < this->swarmparents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->swarmparents(i), target);
  }

  // repeated .PRIME.PeerInfo swarmChildren = 5;
  for (int i = 0; i < this->swarmchildren_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->swarmchildren(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Reply_PeerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PRIME.PeerInfo dest = 1;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest());
    }

  }
  // repeated .PRIME.PeerInfo diffParents = 2;
  total_size += 1 * this->diffparents_size();
  for (int i = 0; i < this->diffparents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->diffparents(i));
  }

  // repeated .PRIME.PeerInfo diffChildren = 3;
  total_size += 1 * this->diffchildren_size();
  for (int i = 0; i < this->diffchildren_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->diffchildren(i));
  }

  // repeated .PRIME.PeerInfo swarmParents = 4;
  total_size += 1 * this->swarmparents_size();
  for (int i = 0; i < this->swarmparents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->swarmparents(i));
  }

  // repeated .PRIME.PeerInfo swarmChildren = 5;
  total_size += 1 * this->swarmchildren_size();
  for (int i = 0; i < this->swarmchildren_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->swarmchildren(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_PeerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_PeerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_PeerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_PeerState::MergeFrom(const Reply_PeerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  diffparents_.MergeFrom(from.diffparents_);
  diffchildren_.MergeFrom(from.diffchildren_);
  swarmparents_.MergeFrom(from.swarmparents_);
  swarmchildren_.MergeFrom(from.swarmchildren_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest()) {
      mutable_dest()->::PRIME::PeerInfo::MergeFrom(from.dest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_PeerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_PeerState::CopyFrom(const Reply_PeerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_PeerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_dest()) {
    if (!this->dest().IsInitialized()) return false;
  }
  for (int i = 0; i < diffparents_size(); i++) {
    if (!this->diffparents(i).IsInitialized()) return false;
  }
  for (int i = 0; i < diffchildren_size(); i++) {
    if (!this->diffchildren(i).IsInitialized()) return false;
  }
  for (int i = 0; i < swarmparents_size(); i++) {
    if (!this->swarmparents(i).IsInitialized()) return false;
  }
  for (int i = 0; i < swarmchildren_size(); i++) {
    if (!this->swarmchildren(i).IsInitialized()) return false;
  }
  return true;
}

void Reply_PeerState::Swap(Reply_PeerState* other) {
  if (other != this) {
    std::swap(dest_, other->dest_);
    diffparents_.Swap(&other->diffparents_);
    diffchildren_.Swap(&other->diffchildren_);
    swarmparents_.Swap(&other->swarmparents_);
    swarmchildren_.Swap(&other->swarmchildren_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_PeerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_PeerState_descriptor_;
  metadata.reflection = Reply_PeerState_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply_PRIMEState::kNodesFieldNumber;
#endif  // !_MSC_VER

Reply_PRIMEState::Reply_PRIMEState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Reply_PRIMEState::InitAsDefaultInstance() {
}

Reply_PRIMEState::Reply_PRIMEState(const Reply_PRIMEState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Reply_PRIMEState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_PRIMEState::~Reply_PRIMEState() {
  SharedDtor();
}

void Reply_PRIMEState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Reply_PRIMEState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_PRIMEState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_PRIMEState_descriptor_;
}

const Reply_PRIMEState& Reply_PRIMEState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

Reply_PRIMEState* Reply_PRIMEState::default_instance_ = NULL;

Reply_PRIMEState* Reply_PRIMEState::New() const {
  return new Reply_PRIMEState;
}

void Reply_PRIMEState::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_PRIMEState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PRIME.Reply.PeerState nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Reply_PRIMEState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PRIME.Reply.PeerState nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Reply_PRIMEState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PRIME.Reply.PeerState nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Reply_PRIMEState::ByteSize() const {
  int total_size = 0;

  // repeated .PRIME.Reply.PeerState nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_PRIMEState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_PRIMEState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_PRIMEState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_PRIMEState::MergeFrom(const Reply_PRIMEState& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_PRIMEState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_PRIMEState::CopyFrom(const Reply_PRIMEState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_PRIMEState::IsInitialized() const {

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void Reply_PRIMEState::Swap(Reply_PRIMEState* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_PRIMEState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_PRIMEState_descriptor_;
  metadata.reflection = Reply_PRIMEState_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply_P2PSIReply::kStreamPortFieldNumber;
const int Reply_P2PSIReply::kSdpFieldNumber;
const int Reply_P2PSIReply::kMaxFrameCountFieldNumber;
const int Reply_P2PSIReply::kWidthFieldNumber;
const int Reply_P2PSIReply::kHeightFieldNumber;
const int Reply_P2PSIReply::kPixFmtFieldNumber;
const int Reply_P2PSIReply::kDiffParentFieldNumber;
#endif  // !_MSC_VER

Reply_P2PSIReply::Reply_P2PSIReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Reply_P2PSIReply::InitAsDefaultInstance() {
  diffparent_ = const_cast< ::PRIME::PeerInfo*>(&::PRIME::PeerInfo::default_instance());
}

Reply_P2PSIReply::Reply_P2PSIReply(const Reply_P2PSIReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Reply_P2PSIReply::SharedCtor() {
  _cached_size_ = 0;
  streamport_ = 0;
  sdp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxframecount_ = 0;
  width_ = 0;
  height_ = 0;
  pixfmt_ = 0;
  diffparent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply_P2PSIReply::~Reply_P2PSIReply() {
  SharedDtor();
}

void Reply_P2PSIReply::SharedDtor() {
  if (sdp_ != &::google::protobuf::internal::kEmptyString) {
    delete sdp_;
  }
  if (this != default_instance_) {
    delete diffparent_;
  }
}

void Reply_P2PSIReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_P2PSIReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_P2PSIReply_descriptor_;
}

const Reply_P2PSIReply& Reply_P2PSIReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

Reply_P2PSIReply* Reply_P2PSIReply::default_instance_ = NULL;

Reply_P2PSIReply* Reply_P2PSIReply::New() const {
  return new Reply_P2PSIReply;
}

void Reply_P2PSIReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    streamport_ = 0;
    if (has_sdp()) {
      if (sdp_ != &::google::protobuf::internal::kEmptyString) {
        sdp_->clear();
      }
    }
    maxframecount_ = 0;
    width_ = 0;
    height_ = 0;
    pixfmt_ = 0;
    if (has_diffparent()) {
      if (diffparent_ != NULL) diffparent_->::PRIME::PeerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply_P2PSIReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 streamPort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streamport_)));
          set_has_streamport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sdp;
        break;
      }

      // required string sdp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdp().data(), this->sdp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxFrameCount;
        break;
      }

      // required int32 maxFrameCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxFrameCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxframecount_)));
          set_has_maxframecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // required int32 width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // required int32 height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pixFmt;
        break;
      }

      // required int32 pixFmt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixFmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixfmt_)));
          set_has_pixfmt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_diffParent;
        break;
      }

      // required .PRIME.PeerInfo diffParent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diffParent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diffparent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Reply_P2PSIReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 streamPort = 1;
  if (has_streamport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->streamport(), output);
  }

  // required string sdp = 2;
  if (has_sdp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdp().data(), this->sdp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sdp(), output);
  }

  // required int32 maxFrameCount = 3;
  if (has_maxframecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxframecount(), output);
  }

  // required int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // required int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // required int32 pixFmt = 6;
  if (has_pixfmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pixfmt(), output);
  }

  // required .PRIME.PeerInfo diffParent = 7;
  if (has_diffparent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->diffparent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Reply_P2PSIReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 streamPort = 1;
  if (has_streamport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->streamport(), target);
  }

  // required string sdp = 2;
  if (has_sdp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdp().data(), this->sdp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sdp(), target);
  }

  // required int32 maxFrameCount = 3;
  if (has_maxframecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxframecount(), target);
  }

  // required int32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // required int32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // required int32 pixFmt = 6;
  if (has_pixfmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pixfmt(), target);
  }

  // required .PRIME.PeerInfo diffParent = 7;
  if (has_diffparent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->diffparent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Reply_P2PSIReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 streamPort = 1;
    if (has_streamport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streamport());
    }

    // required string sdp = 2;
    if (has_sdp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdp());
    }

    // required int32 maxFrameCount = 3;
    if (has_maxframecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxframecount());
    }

    // required int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required int32 pixFmt = 6;
    if (has_pixfmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixfmt());
    }

    // required .PRIME.PeerInfo diffParent = 7;
    if (has_diffparent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diffparent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_P2PSIReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply_P2PSIReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply_P2PSIReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply_P2PSIReply::MergeFrom(const Reply_P2PSIReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streamport()) {
      set_streamport(from.streamport());
    }
    if (from.has_sdp()) {
      set_sdp(from.sdp());
    }
    if (from.has_maxframecount()) {
      set_maxframecount(from.maxframecount());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_pixfmt()) {
      set_pixfmt(from.pixfmt());
    }
    if (from.has_diffparent()) {
      mutable_diffparent()->::PRIME::PeerInfo::MergeFrom(from.diffparent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply_P2PSIReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_P2PSIReply::CopyFrom(const Reply_P2PSIReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_P2PSIReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_diffparent()) {
    if (!this->diffparent().IsInitialized()) return false;
  }
  return true;
}

void Reply_P2PSIReply::Swap(Reply_P2PSIReply* other) {
  if (other != this) {
    std::swap(streamport_, other->streamport_);
    std::swap(sdp_, other->sdp_);
    std::swap(maxframecount_, other->maxframecount_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(pixfmt_, other->pixfmt_);
    std::swap(diffparent_, other->diffparent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply_P2PSIReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_P2PSIReply_descriptor_;
  metadata.reflection = Reply_P2PSIReply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Reply::kTypeFieldNumber;
const int Reply::kCsSessionStateFieldNumber;
const int Reply::kP2PSessionStateFieldNumber;
#endif  // !_MSC_VER

Reply::Reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Reply::InitAsDefaultInstance() {
  cs_session_state_ = const_cast< ::PRIME::Reply_CSSIReply*>(&::PRIME::Reply_CSSIReply::default_instance());
  p2p_session_state_ = const_cast< ::PRIME::Reply_P2PSIReply*>(&::PRIME::Reply_P2PSIReply::default_instance());
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Reply::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  cs_session_state_ = NULL;
  p2p_session_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply::~Reply() {
  SharedDtor();
}

void Reply::SharedDtor() {
  if (this != default_instance_) {
    delete cs_session_state_;
    delete p2p_session_state_;
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New() const {
  return new Reply;
}

void Reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_cs_session_state()) {
      if (cs_session_state_ != NULL) cs_session_state_->::PRIME::Reply_CSSIReply::Clear();
    }
    if (has_p2p_session_state()) {
      if (p2p_session_state_ != NULL) p2p_session_state_->::PRIME::Reply_P2PSIReply::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PRIME.Reply.ReplyType Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PRIME::Reply_ReplyType_IsValid(value)) {
            set_type(static_cast< ::PRIME::Reply_ReplyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_cs_session_state;
        break;
      }

      // optional .PRIME.Reply.CSSIReply cs_session_state = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cs_session_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cs_session_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_p2p_session_state;
        break;
      }

      // optional .PRIME.Reply.P2PSIReply p2p_session_state = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_p2p_session_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p2p_session_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PRIME.Reply.ReplyType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .PRIME.Reply.CSSIReply cs_session_state = 21;
  if (has_cs_session_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->cs_session_state(), output);
  }

  // optional .PRIME.Reply.P2PSIReply p2p_session_state = 22;
  if (has_p2p_session_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->p2p_session_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PRIME.Reply.ReplyType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .PRIME.Reply.CSSIReply cs_session_state = 21;
  if (has_cs_session_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->cs_session_state(), target);
  }

  // optional .PRIME.Reply.P2PSIReply p2p_session_state = 22;
  if (has_p2p_session_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->p2p_session_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PRIME.Reply.ReplyType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .PRIME.Reply.CSSIReply cs_session_state = 21;
    if (has_cs_session_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cs_session_state());
    }

    // optional .PRIME.Reply.P2PSIReply p2p_session_state = 22;
    if (has_p2p_session_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p2p_session_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cs_session_state()) {
      mutable_cs_session_state()->::PRIME::Reply_CSSIReply::MergeFrom(from.cs_session_state());
    }
    if (from.has_p2p_session_state()) {
      mutable_p2p_session_state()->::PRIME::Reply_P2PSIReply::MergeFrom(from.p2p_session_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cs_session_state()) {
    if (!this->cs_session_state().IsInitialized()) return false;
  }
  if (has_p2p_session_state()) {
    if (!this->p2p_session_state().IsInitialized()) return false;
  }
  return true;
}

void Reply::Swap(Reply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cs_session_state_, other->cs_session_state_);
    std::swap(p2p_session_state_, other->p2p_session_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_RequestType_descriptor_;
}
bool Request_RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_RequestType Request::NULL_TYPE;
const Request_RequestType Request::CS_SESSION_INIT;
const Request_RequestType Request::P2P_SESSION_INIT;
const Request_RequestType Request::CS_SESSION_END;
const Request_RequestType Request::P2P_SESSION_END;
const Request_RequestType Request::SERVE_AS_SWARMING_PARENT;
const Request_RequestType Request::BECOME_SWARMING_CHILD;
const Request_RequestType Request::SERVE_AS_DIFFUSION_PARENT;
const Request_RequestType Request::BECOME_DIFFUSION_CHILD;
const Request_RequestType Request::RequestType_MIN;
const Request_RequestType Request::RequestType_MAX;
const int Request::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Request_CSSIRequest::kDBWFieldNumber;
const int Request_CSSIRequest::kPeerNameFieldNumber;
const int Request_CSSIRequest::kRepPortFieldNumber;
const int Request_CSSIRequest::kIpAddrFieldNumber;
#endif  // !_MSC_VER

Request_CSSIRequest::Request_CSSIRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request_CSSIRequest::InitAsDefaultInstance() {
}

Request_CSSIRequest::Request_CSSIRequest(const Request_CSSIRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request_CSSIRequest::SharedCtor() {
  _cached_size_ = 0;
  dbw_ = 0;
  peername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  repport_ = 0;
  ipaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_CSSIRequest::~Request_CSSIRequest() {
  SharedDtor();
}

void Request_CSSIRequest::SharedDtor() {
  if (peername_ != &::google::protobuf::internal::kEmptyString) {
    delete peername_;
  }
  if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddr_;
  }
  if (this != default_instance_) {
  }
}

void Request_CSSIRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_CSSIRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_CSSIRequest_descriptor_;
}

const Request_CSSIRequest& Request_CSSIRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

Request_CSSIRequest* Request_CSSIRequest::default_instance_ = NULL;

Request_CSSIRequest* Request_CSSIRequest::New() const {
  return new Request_CSSIRequest;
}

void Request_CSSIRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dbw_ = 0;
    if (has_peername()) {
      if (peername_ != &::google::protobuf::internal::kEmptyString) {
        peername_->clear();
      }
    }
    repport_ = 0;
    if (has_ipaddr()) {
      if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
        ipaddr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_CSSIRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double DBW = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbw_)));
          set_has_dbw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peerName;
        break;
      }

      // required string peerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peername().data(), this->peername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_repPort;
        break;
      }

      // required int32 repPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repport_)));
          set_has_repport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ipAddr;
        break;
      }

      // required string ipAddr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipaddr().data(), this->ipaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request_CSSIRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double DBW = 1;
  if (has_dbw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dbw(), output);
  }

  // required string peerName = 2;
  if (has_peername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peername().data(), this->peername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->peername(), output);
  }

  // required int32 repPort = 3;
  if (has_repport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->repport(), output);
  }

  // required string ipAddr = 4;
  if (has_ipaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ipaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request_CSSIRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double DBW = 1;
  if (has_dbw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dbw(), target);
  }

  // required string peerName = 2;
  if (has_peername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peername().data(), this->peername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->peername(), target);
  }

  // required int32 repPort = 3;
  if (has_repport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->repport(), target);
  }

  // required string ipAddr = 4;
  if (has_ipaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ipaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request_CSSIRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double DBW = 1;
    if (has_dbw()) {
      total_size += 1 + 8;
    }

    // required string peerName = 2;
    if (has_peername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peername());
    }

    // required int32 repPort = 3;
    if (has_repport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repport());
    }

    // required string ipAddr = 4;
    if (has_ipaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_CSSIRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_CSSIRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_CSSIRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_CSSIRequest::MergeFrom(const Request_CSSIRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbw()) {
      set_dbw(from.dbw());
    }
    if (from.has_peername()) {
      set_peername(from.peername());
    }
    if (from.has_repport()) {
      set_repport(from.repport());
    }
    if (from.has_ipaddr()) {
      set_ipaddr(from.ipaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_CSSIRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_CSSIRequest::CopyFrom(const Request_CSSIRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_CSSIRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Request_CSSIRequest::Swap(Request_CSSIRequest* other) {
  if (other != this) {
    std::swap(dbw_, other->dbw_);
    std::swap(peername_, other->peername_);
    std::swap(repport_, other->repport_);
    std::swap(ipaddr_, other->ipaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_CSSIRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_CSSIRequest_descriptor_;
  metadata.reflection = Request_CSSIRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_P2PSIRequest::kDBWFieldNumber;
const int Request_P2PSIRequest::kUBWFieldNumber;
const int Request_P2PSIRequest::kRepPortFieldNumber;
const int Request_P2PSIRequest::kRtpRecvPortFieldNumber;
const int Request_P2PSIRequest::kRepSendPortFieldNumber;
const int Request_P2PSIRequest::kPeerNameFieldNumber;
const int Request_P2PSIRequest::kIpAddrFieldNumber;
#endif  // !_MSC_VER

Request_P2PSIRequest::Request_P2PSIRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request_P2PSIRequest::InitAsDefaultInstance() {
}

Request_P2PSIRequest::Request_P2PSIRequest(const Request_P2PSIRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request_P2PSIRequest::SharedCtor() {
  _cached_size_ = 0;
  dbw_ = 0;
  ubw_ = 0;
  repport_ = 0;
  rtprecvport_ = 0;
  repsendport_ = 0;
  peername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ipaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_P2PSIRequest::~Request_P2PSIRequest() {
  SharedDtor();
}

void Request_P2PSIRequest::SharedDtor() {
  if (peername_ != &::google::protobuf::internal::kEmptyString) {
    delete peername_;
  }
  if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddr_;
  }
  if (this != default_instance_) {
  }
}

void Request_P2PSIRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_P2PSIRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_P2PSIRequest_descriptor_;
}

const Request_P2PSIRequest& Request_P2PSIRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

Request_P2PSIRequest* Request_P2PSIRequest::default_instance_ = NULL;

Request_P2PSIRequest* Request_P2PSIRequest::New() const {
  return new Request_P2PSIRequest;
}

void Request_P2PSIRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dbw_ = 0;
    ubw_ = 0;
    repport_ = 0;
    rtprecvport_ = 0;
    repsendport_ = 0;
    if (has_peername()) {
      if (peername_ != &::google::protobuf::internal::kEmptyString) {
        peername_->clear();
      }
    }
    if (has_ipaddr()) {
      if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
        ipaddr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_P2PSIRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double DBW = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dbw_)));
          set_has_dbw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_UBW;
        break;
      }

      // required double UBW = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_UBW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ubw_)));
          set_has_ubw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_repPort;
        break;
      }

      // required int32 repPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repport_)));
          set_has_repport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rtpRecvPort;
        break;
      }

      // required int32 rtpRecvPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtpRecvPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtprecvport_)));
          set_has_rtprecvport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_repSendPort;
        break;
      }

      // required int32 repSendPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repSendPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repsendport_)));
          set_has_repsendport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_peerName;
        break;
      }

      // required string peerName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peername().data(), this->peername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ipAddr;
        break;
      }

      // required string ipAddr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipaddr().data(), this->ipaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request_P2PSIRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double DBW = 1;
  if (has_dbw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dbw(), output);
  }

  // required double UBW = 2;
  if (has_ubw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ubw(), output);
  }

  // required int32 repPort = 3;
  if (has_repport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->repport(), output);
  }

  // required int32 rtpRecvPort = 4;
  if (has_rtprecvport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rtprecvport(), output);
  }

  // required int32 repSendPort = 5;
  if (has_repsendport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->repsendport(), output);
  }

  // required string peerName = 6;
  if (has_peername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peername().data(), this->peername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->peername(), output);
  }

  // required string ipAddr = 7;
  if (has_ipaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ipaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request_P2PSIRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double DBW = 1;
  if (has_dbw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dbw(), target);
  }

  // required double UBW = 2;
  if (has_ubw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ubw(), target);
  }

  // required int32 repPort = 3;
  if (has_repport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->repport(), target);
  }

  // required int32 rtpRecvPort = 4;
  if (has_rtprecvport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rtprecvport(), target);
  }

  // required int32 repSendPort = 5;
  if (has_repsendport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->repsendport(), target);
  }

  // required string peerName = 6;
  if (has_peername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peername().data(), this->peername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->peername(), target);
  }

  // required string ipAddr = 7;
  if (has_ipaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ipaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request_P2PSIRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double DBW = 1;
    if (has_dbw()) {
      total_size += 1 + 8;
    }

    // required double UBW = 2;
    if (has_ubw()) {
      total_size += 1 + 8;
    }

    // required int32 repPort = 3;
    if (has_repport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repport());
    }

    // required int32 rtpRecvPort = 4;
    if (has_rtprecvport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtprecvport());
    }

    // required int32 repSendPort = 5;
    if (has_repsendport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repsendport());
    }

    // required string peerName = 6;
    if (has_peername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peername());
    }

    // required string ipAddr = 7;
    if (has_ipaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_P2PSIRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_P2PSIRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_P2PSIRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_P2PSIRequest::MergeFrom(const Request_P2PSIRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbw()) {
      set_dbw(from.dbw());
    }
    if (from.has_ubw()) {
      set_ubw(from.ubw());
    }
    if (from.has_repport()) {
      set_repport(from.repport());
    }
    if (from.has_rtprecvport()) {
      set_rtprecvport(from.rtprecvport());
    }
    if (from.has_repsendport()) {
      set_repsendport(from.repsendport());
    }
    if (from.has_peername()) {
      set_peername(from.peername());
    }
    if (from.has_ipaddr()) {
      set_ipaddr(from.ipaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_P2PSIRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_P2PSIRequest::CopyFrom(const Request_P2PSIRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_P2PSIRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Request_P2PSIRequest::Swap(Request_P2PSIRequest* other) {
  if (other != this) {
    std::swap(dbw_, other->dbw_);
    std::swap(ubw_, other->ubw_);
    std::swap(repport_, other->repport_);
    std::swap(rtprecvport_, other->rtprecvport_);
    std::swap(repsendport_, other->repsendport_);
    std::swap(peername_, other->peername_);
    std::swap(ipaddr_, other->ipaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_P2PSIRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_P2PSIRequest_descriptor_;
  metadata.reflection = Request_P2PSIRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request::kTypeFieldNumber;
const int Request::kCsSessionPropsFieldNumber;
const int Request::kP2PSessionPropsFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
  cs_session_props_ = const_cast< ::PRIME::Request_CSSIRequest*>(&::PRIME::Request_CSSIRequest::default_instance());
  p2p_session_props_ = const_cast< ::PRIME::Request_P2PSIRequest*>(&::PRIME::Request_P2PSIRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  cs_session_props_ = NULL;
  p2p_session_props_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete cs_session_props_;
    delete p2p_session_props_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_cs_session_props()) {
      if (cs_session_props_ != NULL) cs_session_props_->::PRIME::Request_CSSIRequest::Clear();
    }
    if (has_p2p_session_props()) {
      if (p2p_session_props_ != NULL) p2p_session_props_->::PRIME::Request_P2PSIRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PRIME.Request.RequestType Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PRIME::Request_RequestType_IsValid(value)) {
            set_type(static_cast< ::PRIME::Request_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_cs_session_props;
        break;
      }

      // optional .PRIME.Request.CSSIRequest cs_session_props = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cs_session_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cs_session_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_p2p_session_props;
        break;
      }

      // optional .PRIME.Request.P2PSIRequest p2p_session_props = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_p2p_session_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p2p_session_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PRIME.Request.RequestType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .PRIME.Request.CSSIRequest cs_session_props = 21;
  if (has_cs_session_props()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->cs_session_props(), output);
  }

  // optional .PRIME.Request.P2PSIRequest p2p_session_props = 22;
  if (has_p2p_session_props()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->p2p_session_props(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PRIME.Request.RequestType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .PRIME.Request.CSSIRequest cs_session_props = 21;
  if (has_cs_session_props()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->cs_session_props(), target);
  }

  // optional .PRIME.Request.P2PSIRequest p2p_session_props = 22;
  if (has_p2p_session_props()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->p2p_session_props(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PRIME.Request.RequestType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .PRIME.Request.CSSIRequest cs_session_props = 21;
    if (has_cs_session_props()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cs_session_props());
    }

    // optional .PRIME.Request.P2PSIRequest p2p_session_props = 22;
    if (has_p2p_session_props()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p2p_session_props());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cs_session_props()) {
      mutable_cs_session_props()->::PRIME::Request_CSSIRequest::MergeFrom(from.cs_session_props());
    }
    if (from.has_p2p_session_props()) {
      mutable_p2p_session_props()->::PRIME::Request_P2PSIRequest::MergeFrom(from.p2p_session_props());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cs_session_props()) {
    if (!this->cs_session_props().IsInitialized()) return false;
  }
  if (has_p2p_session_props()) {
    if (!this->p2p_session_props().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cs_session_props_, other->cs_session_props_);
    std::swap(p2p_session_props_, other->p2p_session_props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Report_ReportType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_ReportType_descriptor_;
}
bool Report_ReportType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Report_ReportType Report::NULL_TYPE;
const Report_ReportType Report::SWARM_REPORT_TYPE;
const Report_ReportType Report::DIFF_REPORT_TYPE;
const Report_ReportType Report::ADD_DIFF_PARENT_TYPE;
const Report_ReportType Report::ADD_DIFF_CHILD_TYPE;
const Report_ReportType Report::ADD_SWARM_PARENT_TYPE;
const Report_ReportType Report::ADD_SWARM_CHILD_TYPE;
const Report_ReportType Report::ReportType_MIN;
const Report_ReportType Report::ReportType_MAX;
const int Report::ReportType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Report_DiffusionReport::kStartTsFieldNumber;
const int Report_DiffusionReport::kEndTsFieldNumber;
const int Report_DiffusionReport::kStartSeqFieldNumber;
const int Report_DiffusionReport::kEndSeqFieldNumber;
#endif  // !_MSC_VER

Report_DiffusionReport::Report_DiffusionReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Report_DiffusionReport::InitAsDefaultInstance() {
}

Report_DiffusionReport::Report_DiffusionReport(const Report_DiffusionReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Report_DiffusionReport::SharedCtor() {
  _cached_size_ = 0;
  start_ts_ = GOOGLE_ULONGLONG(0);
  end_ts_ = GOOGLE_ULONGLONG(0);
  start_seq_ = 0u;
  end_seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Report_DiffusionReport::~Report_DiffusionReport() {
  SharedDtor();
}

void Report_DiffusionReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Report_DiffusionReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report_DiffusionReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_DiffusionReport_descriptor_;
}

const Report_DiffusionReport& Report_DiffusionReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

Report_DiffusionReport* Report_DiffusionReport::default_instance_ = NULL;

Report_DiffusionReport* Report_DiffusionReport::New() const {
  return new Report_DiffusionReport;
}

void Report_DiffusionReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_ts_ = GOOGLE_ULONGLONG(0);
    end_ts_ = GOOGLE_ULONGLONG(0);
    start_seq_ = 0u;
    end_seq_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Report_DiffusionReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 start_ts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ts_)));
          set_has_start_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_ts;
        break;
      }

      // required uint64 end_ts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_ts_)));
          set_has_end_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_seq;
        break;
      }

      // required uint32 start_seq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_seq_)));
          set_has_start_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_seq;
        break;
      }

      // required uint32 end_seq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_seq_)));
          set_has_end_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Report_DiffusionReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 start_ts = 1;
  if (has_start_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_ts(), output);
  }

  // required uint64 end_ts = 2;
  if (has_end_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_ts(), output);
  }

  // required uint32 start_seq = 3;
  if (has_start_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_seq(), output);
  }

  // required uint32 end_seq = 4;
  if (has_end_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Report_DiffusionReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 start_ts = 1;
  if (has_start_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_ts(), target);
  }

  // required uint64 end_ts = 2;
  if (has_end_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_ts(), target);
  }

  // required uint32 start_seq = 3;
  if (has_start_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_seq(), target);
  }

  // required uint32 end_seq = 4;
  if (has_end_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Report_DiffusionReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 start_ts = 1;
    if (has_start_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_ts());
    }

    // required uint64 end_ts = 2;
    if (has_end_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_ts());
    }

    // required uint32 start_seq = 3;
    if (has_start_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_seq());
    }

    // required uint32 end_seq = 4;
    if (has_end_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report_DiffusionReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Report_DiffusionReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Report_DiffusionReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Report_DiffusionReport::MergeFrom(const Report_DiffusionReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_ts()) {
      set_start_ts(from.start_ts());
    }
    if (from.has_end_ts()) {
      set_end_ts(from.end_ts());
    }
    if (from.has_start_seq()) {
      set_start_seq(from.start_seq());
    }
    if (from.has_end_seq()) {
      set_end_seq(from.end_seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Report_DiffusionReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report_DiffusionReport::CopyFrom(const Report_DiffusionReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report_DiffusionReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Report_DiffusionReport::Swap(Report_DiffusionReport* other) {
  if (other != this) {
    std::swap(start_ts_, other->start_ts_);
    std::swap(end_ts_, other->end_ts_);
    std::swap(start_seq_, other->start_seq_);
    std::swap(end_seq_, other->end_seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Report_DiffusionReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Report_DiffusionReport_descriptor_;
  metadata.reflection = Report_DiffusionReport_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Report_SwarmingReport::kStartSeqFieldNumber;
const int Report_SwarmingReport::kEndSeqFieldNumber;
const int Report_SwarmingReport::kStateFieldNumber;
#endif  // !_MSC_VER

Report_SwarmingReport::Report_SwarmingReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Report_SwarmingReport::InitAsDefaultInstance() {
}

Report_SwarmingReport::Report_SwarmingReport(const Report_SwarmingReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Report_SwarmingReport::SharedCtor() {
  _cached_size_ = 0;
  start_seq_ = 0u;
  end_seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Report_SwarmingReport::~Report_SwarmingReport() {
  SharedDtor();
}

void Report_SwarmingReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Report_SwarmingReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report_SwarmingReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_SwarmingReport_descriptor_;
}

const Report_SwarmingReport& Report_SwarmingReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

Report_SwarmingReport* Report_SwarmingReport::default_instance_ = NULL;

Report_SwarmingReport* Report_SwarmingReport::New() const {
  return new Report_SwarmingReport;
}

void Report_SwarmingReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_seq_ = 0u;
    end_seq_ = 0u;
  }
  state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Report_SwarmingReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 start_seq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_seq_)));
          set_has_start_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_seq;
        break;
      }

      // required uint32 end_seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_seq_)));
          set_has_end_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // repeated bool state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24, input, this->mutable_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Report_SwarmingReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 start_seq = 1;
  if (has_start_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_seq(), output);
  }

  // required uint32 end_seq = 2;
  if (has_end_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end_seq(), output);
  }

  // repeated bool state = 3;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Report_SwarmingReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 start_seq = 1;
  if (has_start_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_seq(), target);
  }

  // required uint32 end_seq = 2;
  if (has_end_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end_seq(), target);
  }

  // repeated bool state = 3;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(3, this->state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Report_SwarmingReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 start_seq = 1;
    if (has_start_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_seq());
    }

    // required uint32 end_seq = 2;
    if (has_end_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_seq());
    }

  }
  // repeated bool state = 3;
  {
    int data_size = 0;
    data_size = 1 * this->state_size();
    total_size += 1 * this->state_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report_SwarmingReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Report_SwarmingReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Report_SwarmingReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Report_SwarmingReport::MergeFrom(const Report_SwarmingReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_.MergeFrom(from.state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_seq()) {
      set_start_seq(from.start_seq());
    }
    if (from.has_end_seq()) {
      set_end_seq(from.end_seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Report_SwarmingReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report_SwarmingReport::CopyFrom(const Report_SwarmingReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report_SwarmingReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Report_SwarmingReport::Swap(Report_SwarmingReport* other) {
  if (other != this) {
    std::swap(start_seq_, other->start_seq_);
    std::swap(end_seq_, other->end_seq_);
    state_.Swap(&other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Report_SwarmingReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Report_SwarmingReport_descriptor_;
  metadata.reflection = Report_SwarmingReport_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Report_AddDiffParentReport::kPeerNameFieldNumber;
const int Report_AddDiffParentReport::kStreamPortFieldNumber;
const int Report_AddDiffParentReport::kRepPortFieldNumber;
#endif  // !_MSC_VER

Report_AddDiffParentReport::Report_AddDiffParentReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Report_AddDiffParentReport::InitAsDefaultInstance() {
}

Report_AddDiffParentReport::Report_AddDiffParentReport(const Report_AddDiffParentReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Report_AddDiffParentReport::SharedCtor() {
  _cached_size_ = 0;
  peername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stream_port_ = 0;
  rep_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Report_AddDiffParentReport::~Report_AddDiffParentReport() {
  SharedDtor();
}

void Report_AddDiffParentReport::SharedDtor() {
  if (peername_ != &::google::protobuf::internal::kEmptyString) {
    delete peername_;
  }
  if (this != default_instance_) {
  }
}

void Report_AddDiffParentReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report_AddDiffParentReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_AddDiffParentReport_descriptor_;
}

const Report_AddDiffParentReport& Report_AddDiffParentReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

Report_AddDiffParentReport* Report_AddDiffParentReport::default_instance_ = NULL;

Report_AddDiffParentReport* Report_AddDiffParentReport::New() const {
  return new Report_AddDiffParentReport;
}

void Report_AddDiffParentReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_peername()) {
      if (peername_ != &::google::protobuf::internal::kEmptyString) {
        peername_->clear();
      }
    }
    stream_port_ = 0;
    rep_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Report_AddDiffParentReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string peerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peername().data(), this->peername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stream_port;
        break;
      }

      // required int32 stream_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stream_port_)));
          set_has_stream_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rep_port;
        break;
      }

      // required int32 rep_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rep_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rep_port_)));
          set_has_rep_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Report_AddDiffParentReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string peerName = 1;
  if (has_peername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peername().data(), this->peername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->peername(), output);
  }

  // required int32 stream_port = 2;
  if (has_stream_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stream_port(), output);
  }

  // required int32 rep_port = 3;
  if (has_rep_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rep_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Report_AddDiffParentReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string peerName = 1;
  if (has_peername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peername().data(), this->peername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->peername(), target);
  }

  // required int32 stream_port = 2;
  if (has_stream_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stream_port(), target);
  }

  // required int32 rep_port = 3;
  if (has_rep_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rep_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Report_AddDiffParentReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string peerName = 1;
    if (has_peername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peername());
    }

    // required int32 stream_port = 2;
    if (has_stream_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stream_port());
    }

    // required int32 rep_port = 3;
    if (has_rep_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rep_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report_AddDiffParentReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Report_AddDiffParentReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Report_AddDiffParentReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Report_AddDiffParentReport::MergeFrom(const Report_AddDiffParentReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peername()) {
      set_peername(from.peername());
    }
    if (from.has_stream_port()) {
      set_stream_port(from.stream_port());
    }
    if (from.has_rep_port()) {
      set_rep_port(from.rep_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Report_AddDiffParentReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report_AddDiffParentReport::CopyFrom(const Report_AddDiffParentReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report_AddDiffParentReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Report_AddDiffParentReport::Swap(Report_AddDiffParentReport* other) {
  if (other != this) {
    std::swap(peername_, other->peername_);
    std::swap(stream_port_, other->stream_port_);
    std::swap(rep_port_, other->rep_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Report_AddDiffParentReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Report_AddDiffParentReport_descriptor_;
  metadata.reflection = Report_AddDiffParentReport_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Report_AddSwarmParentReport::kSwarmParentFieldNumber;
#endif  // !_MSC_VER

Report_AddSwarmParentReport::Report_AddSwarmParentReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Report_AddSwarmParentReport::InitAsDefaultInstance() {
  swarmparent_ = const_cast< ::PRIME::PeerInfo*>(&::PRIME::PeerInfo::default_instance());
}

Report_AddSwarmParentReport::Report_AddSwarmParentReport(const Report_AddSwarmParentReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Report_AddSwarmParentReport::SharedCtor() {
  _cached_size_ = 0;
  swarmparent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Report_AddSwarmParentReport::~Report_AddSwarmParentReport() {
  SharedDtor();
}

void Report_AddSwarmParentReport::SharedDtor() {
  if (this != default_instance_) {
    delete swarmparent_;
  }
}

void Report_AddSwarmParentReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report_AddSwarmParentReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_AddSwarmParentReport_descriptor_;
}

const Report_AddSwarmParentReport& Report_AddSwarmParentReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

Report_AddSwarmParentReport* Report_AddSwarmParentReport::default_instance_ = NULL;

Report_AddSwarmParentReport* Report_AddSwarmParentReport::New() const {
  return new Report_AddSwarmParentReport;
}

void Report_AddSwarmParentReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_swarmparent()) {
      if (swarmparent_ != NULL) swarmparent_->::PRIME::PeerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Report_AddSwarmParentReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PRIME.PeerInfo swarmParent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_swarmparent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Report_AddSwarmParentReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PRIME.PeerInfo swarmParent = 1;
  if (has_swarmparent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->swarmparent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Report_AddSwarmParentReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PRIME.PeerInfo swarmParent = 1;
  if (has_swarmparent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->swarmparent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Report_AddSwarmParentReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PRIME.PeerInfo swarmParent = 1;
    if (has_swarmparent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->swarmparent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report_AddSwarmParentReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Report_AddSwarmParentReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Report_AddSwarmParentReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Report_AddSwarmParentReport::MergeFrom(const Report_AddSwarmParentReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_swarmparent()) {
      mutable_swarmparent()->::PRIME::PeerInfo::MergeFrom(from.swarmparent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Report_AddSwarmParentReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report_AddSwarmParentReport::CopyFrom(const Report_AddSwarmParentReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report_AddSwarmParentReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_swarmparent()) {
    if (!this->swarmparent().IsInitialized()) return false;
  }
  return true;
}

void Report_AddSwarmParentReport::Swap(Report_AddSwarmParentReport* other) {
  if (other != this) {
    std::swap(swarmparent_, other->swarmparent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Report_AddSwarmParentReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Report_AddSwarmParentReport_descriptor_;
  metadata.reflection = Report_AddSwarmParentReport_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Report_AddSwarmChildReport::kSwarmChildFieldNumber;
#endif  // !_MSC_VER

Report_AddSwarmChildReport::Report_AddSwarmChildReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Report_AddSwarmChildReport::InitAsDefaultInstance() {
  swarmchild_ = const_cast< ::PRIME::PeerInfo*>(&::PRIME::PeerInfo::default_instance());
}

Report_AddSwarmChildReport::Report_AddSwarmChildReport(const Report_AddSwarmChildReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Report_AddSwarmChildReport::SharedCtor() {
  _cached_size_ = 0;
  swarmchild_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Report_AddSwarmChildReport::~Report_AddSwarmChildReport() {
  SharedDtor();
}

void Report_AddSwarmChildReport::SharedDtor() {
  if (this != default_instance_) {
    delete swarmchild_;
  }
}

void Report_AddSwarmChildReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report_AddSwarmChildReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_AddSwarmChildReport_descriptor_;
}

const Report_AddSwarmChildReport& Report_AddSwarmChildReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

Report_AddSwarmChildReport* Report_AddSwarmChildReport::default_instance_ = NULL;

Report_AddSwarmChildReport* Report_AddSwarmChildReport::New() const {
  return new Report_AddSwarmChildReport;
}

void Report_AddSwarmChildReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_swarmchild()) {
      if (swarmchild_ != NULL) swarmchild_->::PRIME::PeerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Report_AddSwarmChildReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PRIME.PeerInfo swarmChild = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_swarmchild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Report_AddSwarmChildReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PRIME.PeerInfo swarmChild = 1;
  if (has_swarmchild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->swarmchild(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Report_AddSwarmChildReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PRIME.PeerInfo swarmChild = 1;
  if (has_swarmchild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->swarmchild(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Report_AddSwarmChildReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PRIME.PeerInfo swarmChild = 1;
    if (has_swarmchild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->swarmchild());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report_AddSwarmChildReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Report_AddSwarmChildReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Report_AddSwarmChildReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Report_AddSwarmChildReport::MergeFrom(const Report_AddSwarmChildReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_swarmchild()) {
      mutable_swarmchild()->::PRIME::PeerInfo::MergeFrom(from.swarmchild());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Report_AddSwarmChildReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report_AddSwarmChildReport::CopyFrom(const Report_AddSwarmChildReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report_AddSwarmChildReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_swarmchild()) {
    if (!this->swarmchild().IsInitialized()) return false;
  }
  return true;
}

void Report_AddSwarmChildReport::Swap(Report_AddSwarmChildReport* other) {
  if (other != this) {
    std::swap(swarmchild_, other->swarmchild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Report_AddSwarmChildReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Report_AddSwarmChildReport_descriptor_;
  metadata.reflection = Report_AddSwarmChildReport_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Report::kTypeFieldNumber;
const int Report::kDiffReportFieldNumber;
const int Report::kSwarmReportFieldNumber;
const int Report::kAddDiffParentReportFieldNumber;
const int Report::kAddSwarmParentReportFieldNumber;
const int Report::kAddSwarmChildReportFieldNumber;
#endif  // !_MSC_VER

Report::Report()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Report::InitAsDefaultInstance() {
  diff_report_ = const_cast< ::PRIME::Report_DiffusionReport*>(&::PRIME::Report_DiffusionReport::default_instance());
  swarm_report_ = const_cast< ::PRIME::Report_SwarmingReport*>(&::PRIME::Report_SwarmingReport::default_instance());
  add_diff_parent_report_ = const_cast< ::PRIME::Report_AddDiffParentReport*>(&::PRIME::Report_AddDiffParentReport::default_instance());
  add_swarm_parent_report_ = const_cast< ::PRIME::Report_AddSwarmParentReport*>(&::PRIME::Report_AddSwarmParentReport::default_instance());
  add_swarm_child_report_ = const_cast< ::PRIME::Report_AddSwarmChildReport*>(&::PRIME::Report_AddSwarmChildReport::default_instance());
}

Report::Report(const Report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Report::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  diff_report_ = NULL;
  swarm_report_ = NULL;
  add_diff_parent_report_ = NULL;
  add_swarm_parent_report_ = NULL;
  add_swarm_child_report_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Report::~Report() {
  SharedDtor();
}

void Report::SharedDtor() {
  if (this != default_instance_) {
    delete diff_report_;
    delete swarm_report_;
    delete add_diff_parent_report_;
    delete add_swarm_parent_report_;
    delete add_swarm_child_report_;
  }
}

void Report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_descriptor_;
}

const Report& Report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PRIME_2eproto();
  return *default_instance_;
}

Report* Report::default_instance_ = NULL;

Report* Report::New() const {
  return new Report;
}

void Report::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_diff_report()) {
      if (diff_report_ != NULL) diff_report_->::PRIME::Report_DiffusionReport::Clear();
    }
    if (has_swarm_report()) {
      if (swarm_report_ != NULL) swarm_report_->::PRIME::Report_SwarmingReport::Clear();
    }
    if (has_add_diff_parent_report()) {
      if (add_diff_parent_report_ != NULL) add_diff_parent_report_->::PRIME::Report_AddDiffParentReport::Clear();
    }
    if (has_add_swarm_parent_report()) {
      if (add_swarm_parent_report_ != NULL) add_swarm_parent_report_->::PRIME::Report_AddSwarmParentReport::Clear();
    }
    if (has_add_swarm_child_report()) {
      if (add_swarm_child_report_ != NULL) add_swarm_child_report_->::PRIME::Report_AddSwarmChildReport::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PRIME.Report.ReportType Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PRIME::Report_ReportType_IsValid(value)) {
            set_type(static_cast< ::PRIME::Report_ReportType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_diff_report;
        break;
      }

      // optional .PRIME.Report.DiffusionReport diff_report = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diff_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diff_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_swarm_report;
        break;
      }

      // optional .PRIME.Report.SwarmingReport swarm_report = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_swarm_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_swarm_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_add_diff_parent_report;
        break;
      }

      // optional .PRIME.Report.AddDiffParentReport add_diff_parent_report = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_diff_parent_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_diff_parent_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_add_swarm_parent_report;
        break;
      }

      // optional .PRIME.Report.AddSwarmParentReport add_swarm_parent_report = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_swarm_parent_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_swarm_parent_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_add_swarm_child_report;
        break;
      }

      // optional .PRIME.Report.AddSwarmChildReport add_swarm_child_report = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_swarm_child_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_swarm_child_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PRIME.Report.ReportType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .PRIME.Report.DiffusionReport diff_report = 21;
  if (has_diff_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->diff_report(), output);
  }

  // optional .PRIME.Report.SwarmingReport swarm_report = 22;
  if (has_swarm_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->swarm_report(), output);
  }

  // optional .PRIME.Report.AddDiffParentReport add_diff_parent_report = 23;
  if (has_add_diff_parent_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->add_diff_parent_report(), output);
  }

  // optional .PRIME.Report.AddSwarmParentReport add_swarm_parent_report = 24;
  if (has_add_swarm_parent_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->add_swarm_parent_report(), output);
  }

  // optional .PRIME.Report.AddSwarmChildReport add_swarm_child_report = 25;
  if (has_add_swarm_child_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->add_swarm_child_report(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PRIME.Report.ReportType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .PRIME.Report.DiffusionReport diff_report = 21;
  if (has_diff_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->diff_report(), target);
  }

  // optional .PRIME.Report.SwarmingReport swarm_report = 22;
  if (has_swarm_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->swarm_report(), target);
  }

  // optional .PRIME.Report.AddDiffParentReport add_diff_parent_report = 23;
  if (has_add_diff_parent_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->add_diff_parent_report(), target);
  }

  // optional .PRIME.Report.AddSwarmParentReport add_swarm_parent_report = 24;
  if (has_add_swarm_parent_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->add_swarm_parent_report(), target);
  }

  // optional .PRIME.Report.AddSwarmChildReport add_swarm_child_report = 25;
  if (has_add_swarm_child_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->add_swarm_child_report(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Report::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PRIME.Report.ReportType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .PRIME.Report.DiffusionReport diff_report = 21;
    if (has_diff_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diff_report());
    }

    // optional .PRIME.Report.SwarmingReport swarm_report = 22;
    if (has_swarm_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->swarm_report());
    }

    // optional .PRIME.Report.AddDiffParentReport add_diff_parent_report = 23;
    if (has_add_diff_parent_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_diff_parent_report());
    }

    // optional .PRIME.Report.AddSwarmParentReport add_swarm_parent_report = 24;
    if (has_add_swarm_parent_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_swarm_parent_report());
    }

    // optional .PRIME.Report.AddSwarmChildReport add_swarm_child_report = 25;
    if (has_add_swarm_child_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_swarm_child_report());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Report::MergeFrom(const Report& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_diff_report()) {
      mutable_diff_report()->::PRIME::Report_DiffusionReport::MergeFrom(from.diff_report());
    }
    if (from.has_swarm_report()) {
      mutable_swarm_report()->::PRIME::Report_SwarmingReport::MergeFrom(from.swarm_report());
    }
    if (from.has_add_diff_parent_report()) {
      mutable_add_diff_parent_report()->::PRIME::Report_AddDiffParentReport::MergeFrom(from.add_diff_parent_report());
    }
    if (from.has_add_swarm_parent_report()) {
      mutable_add_swarm_parent_report()->::PRIME::Report_AddSwarmParentReport::MergeFrom(from.add_swarm_parent_report());
    }
    if (from.has_add_swarm_child_report()) {
      mutable_add_swarm_child_report()->::PRIME::Report_AddSwarmChildReport::MergeFrom(from.add_swarm_child_report());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report::CopyFrom(const Report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_diff_report()) {
    if (!this->diff_report().IsInitialized()) return false;
  }
  if (has_swarm_report()) {
    if (!this->swarm_report().IsInitialized()) return false;
  }
  if (has_add_diff_parent_report()) {
    if (!this->add_diff_parent_report().IsInitialized()) return false;
  }
  if (has_add_swarm_parent_report()) {
    if (!this->add_swarm_parent_report().IsInitialized()) return false;
  }
  if (has_add_swarm_child_report()) {
    if (!this->add_swarm_child_report().IsInitialized()) return false;
  }
  return true;
}

void Report::Swap(Report* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(diff_report_, other->diff_report_);
    std::swap(swarm_report_, other->swarm_report_);
    std::swap(add_diff_parent_report_, other->add_diff_parent_report_);
    std::swap(add_swarm_parent_report_, other->add_swarm_parent_report_);
    std::swap(add_swarm_child_report_, other->add_swarm_child_report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Report_descriptor_;
  metadata.reflection = Report_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PRIME

// @@protoc_insertion_point(global_scope)
